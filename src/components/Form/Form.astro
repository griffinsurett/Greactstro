---
/** Generic <Form> wrapper
 *
 * Props
 * ─────────────────────────────────────────────────────────────
 * name            – unique form name (default "generic-form")
 * method          – HTTP method (default "post")
 * action          – optional success redirect URL
 * honeypotName    – name of the hidden honeypot field (default "bot-field")
 * formClass       – extra classes on <form>
 * submitClass     – default Tailwind classes for the fallback button
 * submitLabel     – text for the fallback button (default "Submit")
 *
 * Slots
 * ─────────────────────────────────────────────────────────────
 * default         – your input fields
 * submit          – optional custom submit content; if omitted we render a
 *                   default <Button />
 */
import Button from "@/components/Button/Button";

const {
  name = "generic-form",
  method = "post",
  action,
  formClass = "",
  submitClass = "w-full mt-[var(--spacing-sm)] justify-center cursor-pointer",
  submitLabel = "Submit",
  enableSuccessBanner = false,
  successBannerMessage = "Thank you for your submission!",
  successBannerClass = "p-[var(--spacing-sm)] bg-primary text-bg border border-[var(--color-border)]",
} = Astro.props;
---

<form
  name={name}
  method={method}
  action={action}
  class={`w-full p-[var(--spacing-md)] ${formClass}`}
  data-success-banner={enableSuccessBanner}
  data-success-message={successBannerMessage}
  data-success-class={successBannerClass}
>
  <slot />

  {Astro.slots.has("submit") ? (
    <slot name="submit" />
  ) : (
    <Button type="submit" variant="primary" className={submitClass}>
      {submitLabel}
    </Button>
  )}
</form>

<script is:inline>
  document.addEventListener("DOMContentLoaded", () => {
    document
      .querySelectorAll('form[data-success-banner="true"]')
      .forEach((form) => {
        form.addEventListener("submit", async (e) => {
          e.preventDefault();
          const data = new URLSearchParams(new FormData(form));

          let res;
          try {
            res = await fetch(form.action || "/", {
              method: form.method.toUpperCase(),
              headers: {
                "Content-Type": "application/x-www-form-urlencoded",
                Accept: "application/json",
              },
              body: data.toString(),
            });
          } catch (networkErr) {
            console.error("Network error submitting form:", networkErr);
            return;
          }

          // hide the form in all cases
          form.style.display = "none";

          const banner = document.createElement("div");
          banner.className = form.dataset.successClass;

          if (res.ok) {
            // your custom success message
            banner.textContent = form.dataset.successMessage;
          } else {
            // try to pull an error out of the JSON, or fall back
            let errMsg = "There was a problem submitting the form.";
            try {
              const json = await res.json();
              if (json.error) errMsg = json.error;
            } catch {}
            banner.textContent = errMsg;
          }

          form.parentNode.insertBefore(banner, form.nextSibling);
        });
      });
  });
</script>
