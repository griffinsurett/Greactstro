---
import { getCollection } from "astro:content";
import { normalizeRef } from "@/utils/ContentUtils";
import Submenu from "@/components/Submenu.astro";

const { item, itemClass = "" } = Astro.props;

// Derive the last slug segment from item.data.link (e.g. "/about-us/services" → "services")
const thisSlug =
  item.data.link
    .split("/")
    .filter(Boolean) // ["about-us","services"]
    .pop() || "";

// 1) Fetch all menuItems
const allMenuItems = await getCollection("menuItems");

// 2) Normalize our current slug
const normalizedThis = normalizeRef(thisSlug);

// 3) Filter for any menuItem whose `parent` matches `normalizedThis`
const childItems = allMenuItems.filter((child) => {
  if (!child.data.parent) return false;
  return normalizeRef(child.data.parent) === normalizedThis;
});

const hasChildren = childItems.length > 0;
---
<div class={`relative menu-item ${itemClass}`}>
  <a
    href={item.data.link}
    class="flex items-center space-x-[var(--spacing-xs)] text-md text-primary hover:text-secondary transition-colors duration-200 font-bold"
    rel="noopener noreferrer"
  >
    {item.data.icon && (
      <img
        src={item.data.icon}
        alt=""
        class="w-5 h-5 bg-[var(--color-accent)] rounded-full"
      />
    )}
    <span>{item.data.title}</span>

    {hasChildren && (
      <span
        class="submenu-arrow ml-1 transform transition-transform duration-200 group-hover:rotate-180"
        aria-hidden="true"
      >
        ▼
      </span>
    )}
  </a>

  <!-- Delegate all submenu rendering to SubMenu. -->
{hasChildren && <Submenu parentLink={item.data.link} />}
</div>
