---
import { getCollection } from "astro:content";
import { normalizeRef }  from "@/utils/ContentUtils";
import SubMenu from "./Submenu.astro";

const {
  item,

  /* THIS <MenuItem>’s styling/behavior (level‑1 or level‑n) */
  itemClass    = "",
  linkClass    = "",
  hierarchical = false,

  /* The full “submenu” object (component + itemsClass + subMenuItem) */
  submenu = {
    component: null,
    itemsClass: "",
    subMenuItem: {
      component: null,
      props: {
        itemClass:    "",
        linkClass:    "",
        hierarchical: true,
        subMenuItem:  null,
      },
    },
  },
} = Astro.props;

// 1) Find children if any
const thisSlug = item.data.link.split("/").filter(Boolean).pop() || "";
const allMenuItems = await getCollection("menuItems");

const normalizedThis = normalizeRef(thisSlug);
const childItems = allMenuItems.filter((c) => {
  if (!c.data.parent) return false;
  return normalizeRef(c.data.parent) === normalizedThis;
});
const hasChildren = hierarchical && childItems.length > 0;

// 2) “submenu.component” is the nested‐<ul> component (default or overridden)
const SubmenuComponent = submenu.component || SubMenu;
---

<li class={`relative menu-item ${itemClass}`}>
  <a href={item.data.link} class={linkClass} rel="noopener noreferrer">
    {item.data.icon && (
      <img
        src={item.data.icon}
        alt=""
        class="w-5 h-5 bg-[var(--color-accent)] rounded-full"
      />
    )}
    <span>{item.data.title}</span>

    {hasChildren && (
      <span class="submenu-arrow text-sm ml-1 transform transition-transform duration-200">
        ▼
      </span>
    )}
  </a>

  {hasChildren && (
    <SubmenuComponent
      parentLink={item.data.link}
      submenu={submenu}
    />
  )}
</li>
