---
// src/components/Menu/MenuItem.astro
import { getItemKey } from "@/utils/getItemKey.js";
import Submenu from "./Submenu.astro";
import { getChildItems } from "@/utils/menuUtils.js";
import Button from "@/components/Button/Button.jsx";

const {
  item,
  allItems,
  itemClass = "",
  linkClass = "",
  hierarchical = false,
  collectionName,
  submenu = {
    component: null,
    itemsClass: "",
    subMenuItem: {
      component: null,
      props: {
        itemClass: "",
        linkClass: "",
        hierarchical: true,
        subMenuItem: null,
      },
    },
  },
} = Astro.props;

/* 1) Compute this item’s stable ID */
const thisId = getItemKey(item);

/* 2) Find direct children via helper */
const childItems = getChildItems(thisId, allItems);
const hasChildren = hierarchical && childItems.length > 0;

/* 3) Resolve submenu component */
const SubmenuComponent = submenu.component ?? Submenu;
---

<li role="none" class={`group relative menu-item ${itemClass}`}>
  {/** ── REPLACE <a> WITH <Button as="a"> ── **/}
  <Button
    variant="link"
    as="a"
    href={
      item.data?.link
        ? item.data.link
        : `/${collectionName}/${thisId}`
    }
    class={linkClass}
    rel="noopener noreferrer"
    role="menuitem"
    aria-haspopup={hasChildren ? "true" : undefined}
    tabindex="0"
  >
    {
      item.data.icon && (
        <img
          src={item.data.icon}
          alt=""
          class="w-5 h-5 bg-[var(--color-accent)] rounded-full"
          aria-hidden="true"
        />
      )
    }
    <span>{item.data.title}</span>

    {
      hasChildren && (
        <span
          class="submenu-arrow ml-1 text-sm transform transition-transform duration-200"
          aria-hidden="true"
        >
          ▼
        </span>
      )
    }
  </Button>

  {
    hasChildren && (
      <SubmenuComponent
        allItems={allItems}
        parentId={thisId}
        childItems={childItems}
        submenu={submenu}
      />
    )
  }
</li>
