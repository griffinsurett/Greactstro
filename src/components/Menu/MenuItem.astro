---
// src/components/Menu/MenuItem.astro

import { normalizeRef } from "@/utils/ContentUtils";
import { allMenuItems } from "./menu-data";
import Submenu from "./Submenu.astro";
import { getChildItems } from "@/utils/menuUtils.js";

const {
  item,
  itemClass = "",
  linkClass = "",
  hierarchical = false,
  /* full submenu descriptor */
  submenu = {
    component: null,
    itemsClass: "",
    subMenuItem: {
      component: null,
      props: {
        itemClass: "",
        linkClass: "",
        hierarchical: true,
        subMenuItem: null,
      },
    },
  },
} = Astro.props;

/* 1) Compute this item’s stable ID */
const thisId = item.data.id ?? normalizeRef(item.data.link);

/* 2) DRY’d‐out: find all direct children via our helper */
const childItems = getChildItems(thisId, allMenuItems);
const hasChildren = hierarchical && childItems.length > 0;

/* 3) Resolve submenu component */
const SubmenuComponent = submenu.component ?? Submenu;
---
<li role="none" class={ `group relative menu-item ${itemClass}` }>
  <a
    href={item.data.link}
    class={ linkClass }
    rel="noopener noreferrer"
    role="menuitem"
    aria-haspopup={ hasChildren ? "true" : undefined }
    tabindex="0"
  >
    {item.data.icon && (
      <img
        src={item.data.icon}
        alt=""
        class="w-5 h-5 bg-[var(--color-accent)] rounded-full"
        aria-hidden="true"
      />
    )}
    <span>{item.data.title}</span>

    {hasChildren && (
      <span
        class="submenu-arrow ml-1 text-sm transform transition-transform duration-200"
        aria-hidden="true"
      >
        ▼
      </span>
    )}
  </a>

  {hasChildren && (
    <SubmenuComponent
      parentId={thisId}
      childItems={childItems}
      submenu={submenu}
    />
  )}
</li>
