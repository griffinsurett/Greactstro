---
// src/components/Menu/Menu.astro
import ItemsTemplate from "@/components/Section/ItemsTemplates/ItemsTemplate.astro";
import { queryItems } from "@/utils/CollectionQueryUtils.js";
import { sortItems } from "@/utils/sortItems.js";
import MenuItem from "./MenuItem.astro";
import Submenu from "./Submenu.astro";
import HamburgerMenu from "./HamburgerMenu/HamburgerMenu.jsx";
import HamburgerIcon from "./HamburgerMenu/HamburgerIcon";

// 1️⃣ Destructure primitives + raw object props
const {
  collection = "menuItems",
  query = "relatedItem:menus:mainMenu",
  sortBy = undefined,
  sortOrder = "asc",
  manualOrder = true,
  HasPage = false,
  responsive = false,
  breakpoint = "(max-width: 767px)",
  hamburgerOnly = false,
  desktop: desktopProp = {},
  mobile: mobileProp = {},
} = Astro.props;

// 2️⃣ Merge desktop defaults
const desktop = {
  itemsClass: "flex gap-[var(--spacing-md)]",
  itemClass: "",
  menuItem: {
    component: MenuItem,
    props: {
      itemClass: "",
      linkClass: "",
      hierarchical: false,
      submenu: {
        component: Submenu,
        itemsClass: "",
        subMenuItem: {
          component: MenuItem,
          props: {
            itemClass: "",
            linkClass: "",
            hierarchical: true,
            subMenuItem: null,
          },
        },
      },
    },
  },
  ...desktopProp,
};

// 3️⃣ Merge mobile defaults
const mobile = {
  itemsClass: "",
  itemClass: "",
  menuItem: {
    component: null,
    props: {
      itemClass: "",
      linkClass: "",
      hierarchical: true,
      submenu: {
        component: null,
        itemsClass: "",
        subMenuItem: {
          component: null,
          props: {
            itemClass: "",
            linkClass: "",
            hierarchical: true,
            subMenuItem: null,
          },
        },
      },
    },
  },
  shared: {},
  cfg: {},
  checkboxId: "hamburger-menu-toggle",
  hamburgerTransform: false,
  ...mobileProp,
};

// ─────────────────────────────────────────────────────────────────────────────
// 4️⃣ Fetch and sort mobile entries
let allMenuEntries = [];
if (collection && query) {
  allMenuEntries = await queryItems(query, collection, Astro.url.pathname);
}
let sortedMobileItems = Array.isArray(allMenuEntries)
  ? sortItems(allMenuEntries, sortBy, sortOrder, manualOrder)
  : allMenuEntries;

// ─────────────────────────────────────────────────────────────────────────────
// 5️⃣ Compute desktop roots
const desktopRoots = allMenuEntries.filter((i) => !i.data.parent);
---

{!responsive && !hamburgerOnly && (
  <nav aria-label="Main">
    <ItemsTemplate
      items={desktopRoots}
      collection={collection}
      query={query}
      sortBy={sortBy}
      sortOrder={sortOrder}
      manualOrder={manualOrder}
      HasPage={HasPage}
      itemsClass={desktop.itemsClass}
      itemClass={desktop.itemClass}
      ItemComponent={{ 
        component: desktop.menuItem.component,
        props: {
         ...desktop.menuItem.props,
         allItems: sortedMobileItems
       } 
      }}
      role="menubar"
    />
  </nav>
)}

{responsive && !hamburgerOnly && (
  <>
    <div class="hidden md:block">
      <nav aria-label="Main">
        <ItemsTemplate
          items={desktopRoots}
          collection={collection}
          query={query}
          sortBy={sortBy}
          sortOrder={sortOrder}
          manualOrder={manualOrder}
          HasPage={HasPage}
          itemsClass={desktop.itemsClass}
          itemClass={desktop.itemClass}
          ItemComponent={{
            component: desktop.menuItem.component,
            props: {
              ...desktop.menuItem.props,
              allItems: sortedMobileItems,
            },
          }}
          role="menubar"
        />
      </nav>
    </div>

    <div class="block md:hidden items-center">
      <input type="checkbox" id={mobile.checkboxId} class="hidden" />
      <label for={mobile.checkboxId} class="relative w-6 h-6 cursor-pointer" aria-label="Toggle menu">
        <HamburgerIcon
          client:load
          hamburgerTransform={mobile.hamburgerTransform}
          checkboxId={mobile.checkboxId}
        />
      </label>

      <HamburgerMenu
        client:media={breakpoint}
        checkboxId={mobile.checkboxId}
        allItems={allMenuEntries}
        shared={{ collection, query, sortOrder, HasPage }}
        cfg={{ itemsClass: mobile.itemsClass, menuItem: mobile.menuItem }}
      />
    </div>
  </>
)}

{hamburgerOnly && (
    <>
    <div class="block items-center">
      <input type="checkbox" id={mobile.checkboxId} class="hidden" />
      <label for={mobile.checkboxId} class="relative w-6 h-6 cursor-pointer" aria-label="Toggle menu">
        <HamburgerIcon
          client:load
          hamburgerTransform={mobile.hamburgerTransform}
          checkboxId={mobile.checkboxId}
        />
      </label>

      <HamburgerMenu
        client:media={breakpoint}
        checkboxId={mobile.checkboxId}
        allItems={allMenuEntries}
        shared={{ collection, query, sortOrder, HasPage }}
        cfg={{ itemsClass: mobile.itemsClass, menuItem: mobile.menuItem }}
      />
    </div>
  </>
)}
