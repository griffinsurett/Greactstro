---
// src/components/Menu/Menu.astro
import ItemsTemplate from "@/components/ItemsTemplates/ItemsTemplate.astro";
import { queryItems } from "@/utils/CollectionQueryUtils.js";
import { sortItems } from "@/utils/sortItems.js";
import HamburgerMenu from "./HamburgerMenu/HamburgerMenu.jsx";
import HamburgerIcon from "./HamburgerMenu/HamburgerIcon";
import { desktopDefaults, mobileDefaults } from "./defaults.js";
import { getRootItems } from "@/utils/menuUtils";
import "./styles.css";

const {
  // core data + sort
  collection    = "menuItems",
  query         = "relatedItem:menus:mainMenu",
  sortBy,
  sortOrder     = "asc",
  manualOrder   = true,
  HasPage       = false,
  responsive    = false,
  breakpoint    = "(max-width: 767px)",
  hamburgerOnly = false,
  desktop: desktopProp = {},
  mobile:  mobileProp  = {},
  itemsClass: topItemsClass,
  itemClass:  topItemClass,
  menuItem:   topMenuItem,
  checkboxId: topCheckboxId,
  hamburgerTransform: topHamburgerTransform,
} = Astro.props;

// ─── fetch & sort all menu items ─────────────────────────────────
let allMenuEntries = [];
if (collection && query) {
  allMenuEntries = await queryItems(query, collection, Astro.url.pathname);
}
const sortedMobileItems = Array.isArray(allMenuEntries)
  ? sortItems(allMenuEntries, sortBy, sortOrder, manualOrder)
  : allMenuEntries;

// ─── top‐level roots for desktop & mobile first‐level ───────────────
const desktopRoots = getRootItems(allMenuEntries);

// ─── build final desktop & mobile configs ─────────────────────────
let desktopConfig, mobileConfig;

if (responsive) {
  desktopConfig = { ...desktopDefaults, ...desktopProp };
  mobileConfig  = { ...mobileDefaults,  ...mobileProp  };
} else if (hamburgerOnly) {
  // only mobile/hamburger menu on all sizes:
  mobileConfig = {
    ...mobileDefaults,
    ...mobileProp,
    itemsClass:         topItemsClass        ?? mobileProp.itemsClass        ?? mobileDefaults.itemsClass,
    itemClass:          topItemClass         ?? mobileProp.itemClass         ?? mobileDefaults.itemClass,
    menuItem:           topMenuItem          ?? mobileProp.menuItem          ?? mobileDefaults.menuItem,
    checkboxId:         topCheckboxId        ?? mobileProp.checkboxId        ?? mobileDefaults.checkboxId,
    hamburgerTransform: topHamburgerTransform ?? mobileProp.hamburgerTransform ?? mobileDefaults.hamburgerTransform,
  };
} else {
  // only desktop menu on all sizes:
  desktopConfig = {
    ...desktopDefaults,
    ...desktopProp,
    itemsClass: topItemsClass ?? desktopProp.itemsClass ?? desktopDefaults.itemsClass,
    itemClass:  topItemClass  ?? desktopProp.itemClass  ?? desktopDefaults.itemClass,
    menuItem:   topMenuItem   ?? desktopProp.menuItem   ?? desktopDefaults.menuItem,
  };
}
---

{!responsive && !hamburgerOnly && (
//  ─── Desktop‐only ──────────────────────────────────────────────── 
  <nav aria-label="Main">
    <ItemsTemplate
      items={desktopRoots}
      collection={collection}
      query={query}
      sortBy={sortBy}
      sortOrder={sortOrder}
      manualOrder={manualOrder}
      HasPage={HasPage}
      itemsClass={desktopConfig.itemsClass}
      itemClass={desktopConfig.itemClass}
      ItemComponent={{
        component: desktopConfig.menuItem.component,
        props: {
          ...desktopConfig.menuItem.props,
          allItems: sortedMobileItems,
          collectionName: collection,
        },
      }}
      role="menubar"
    />
  </nav>
)}

{responsive && !hamburgerOnly && (
  // ─── Responsive: desktop + hamburger ─────────────────────────────── 
  <>
    <div class="hidden md:block">
      <nav aria-label="Main">
        <ItemsTemplate
          items={desktopRoots}
          collection={collection}
          query={query}
          sortBy={sortBy}
          sortOrder={sortOrder}
          manualOrder={manualOrder}
          HasPage={HasPage}
          itemsClass={desktopConfig.itemsClass}
          itemClass={desktopConfig.itemClass}
          ItemComponent={{
            component: desktopConfig.menuItem.component,
            props: {
              ...desktopConfig.menuItem.props,
              allItems: sortedMobileItems,
              collectionName: collection,
            },
          }}
          role="menubar"
        />
      </nav>
    </div>

    <div class="block md:hidden items-center" >
      <input type="checkbox" id={mobileConfig.checkboxId} class="hidden" />
      <label
        for={mobileConfig.checkboxId}
        class="relative w-6 h-6 cursor-pointer"
        aria-label="Toggle menu"
      >
        <HamburgerIcon
          client:media={breakpoint}
          hamburgerTransform={mobileConfig.hamburgerTransform}
          checkboxId={mobileConfig.hamburgerTransform ? mobileConfig.checkboxId : undefined}
        />
      </label>

      <HamburgerMenu
        client:media={breakpoint}
        checkboxId={mobileConfig.checkboxId}
        allItems={allMenuEntries}
        shared={{
          collection,
          query,
          sortBy,
          sortOrder,
          HasPage,
        }}
        cfg={{ itemsClass: mobileConfig.itemsClass, menuItem: mobileConfig.menuItem }}
      />
    </div>
  </>
)}

{hamburgerOnly && (
  // ─── Hamburger‐only ─────────────────────────────────────────────── 
  <div class="block items-center">
    <input type="checkbox" id={mobileConfig.checkboxId} class="hidden" />
    <label
      for={mobileConfig.checkboxId}
      class="relative w-6 h-6 cursor-pointer"
      aria-label="Toggle menu"
    >
      <HamburgerIcon
        client:load
        hamburgerTransform={mobileConfig.hamburgerTransform}
        checkboxId={mobileConfig.checkboxId}
      />
    </label>

    <HamburgerMenu
      client:load
      checkboxId={mobileConfig.checkboxId}
      allItems={allMenuEntries}
      shared={{
        collection,
        query,
        sortBy,
        sortOrder,
        HasPage,
      }}
      cfg={{ itemsClass: mobileConfig.itemsClass, menuItem: mobileConfig.menuItem }}
    />
  </div>
)}
