---
// src/components/Menu/Menu.astro
import ItemsTemplate from "@/components/ItemsTemplates/ItemsTemplate.astro";
import { queryItems } from "@/utils/CollectionQueryUtils.js";
import { sortItems } from "@/utils/sortItems.js";
import MenuItem from "./MenuItem.astro";
import Submenu from "./Submenu.astro";
import HamburgerMenu from "./HamburgerMenu/HamburgerMenu.jsx";
import HamburgerIcon from "./HamburgerMenu/HamburgerIcon";
import { desktopDefaults, mobileDefaults } from "./defaults.js";
import { getRootItems } from "@/utils/menuUtils";

const {
  collection = "menuItems",
  query = "relatedItem:menus:mainMenu",
  sortBy,
  sortOrder = "asc",
  manualOrder = true,
  HasPage = false,
  responsive = false,
  breakpoint = "(max-width: 767px)",
  hamburgerOnly = false,
  desktop: desktopProp = {},
  mobile: mobileProp = {},
} = Astro.props;

// merge defaults + any overrides
const desktop = { ...desktopDefaults, ...desktopProp };
const mobile  = { ...mobileDefaults, ...mobileProp };

// fetch & sort all entries
let allMenuEntries = [];
if (collection && query) {
  allMenuEntries = await queryItems(query, collection, Astro.url.pathname);
}
const sortedMobileItems = Array.isArray(allMenuEntries)
  ? sortItems(allMenuEntries, sortBy, sortOrder, manualOrder)
  : allMenuEntries;

// only true top‚Äêlevels
const desktopRoots = getRootItems(allMenuEntries);
---

{!responsive && !hamburgerOnly && (
  <nav aria-label="Main">
    <ItemsTemplate
      items={desktopRoots}
      collection={collection}
      query={query}
      sortBy={sortBy}
      sortOrder={sortOrder}
      manualOrder={manualOrder}
      HasPage={HasPage}
      itemsClass={desktop.itemsClass}
      itemClass={desktop.itemClass}
      ItemComponent={{
        component: desktop.menuItem.component,
        props: {
          ...desktop.menuItem.props,
          allItems: sortedMobileItems,
          collectionName: collection,
        },
      }}
      role="menubar"
    />
  </nav>
)}

{responsive && !hamburgerOnly && (
  <>
    <div class="hidden md:block">
      <nav aria-label="Main">
        <ItemsTemplate
          items={desktopRoots}
          collection={collection}
          query={query}
          sortBy={sortBy}
          sortOrder={sortOrder}
          manualOrder={manualOrder}
          HasPage={HasPage}
          itemsClass={desktop.itemsClass}
          itemClass={desktop.itemClass}
          ItemComponent={{
            component: desktop.menuItem.component,
            props: {
              ...desktop.menuItem.props,
              allItems: sortedMobileItems,
              collectionName: collection,
            },
          }}
          role="menubar"
        />
      </nav>
    </div>

    <div class="block md:hidden items-center">
      <input type="checkbox" id={mobile.checkboxId} class="hidden" />
      <label
        for={mobile.checkboxId}
        class="relative w-6 h-6 cursor-pointer"
        aria-label="Toggle menu"
      >
        <HamburgerIcon
          client:media={breakpoint}
          hamburgerTransform={mobile.hamburgerTransform}
          checkboxId={mobile.checkboxId}
        />
      </label>

      <HamburgerMenu
        client:media={breakpoint}
        checkboxId={mobile.checkboxId}
        allItems={allMenuEntries}
        shared={{
          collection,
          query,
          sortBy,
          sortOrder,
          HasPage,
        }}
        cfg={{ itemsClass: mobile.itemsClass, menuItem: mobile.menuItem }}
      />
    </div>
  </>
)}

{hamburgerOnly && (
  <div class="block items-center">
    <input type="checkbox" id={mobile.checkboxId} class="hidden" />
    <label
      for={mobile.checkboxId}
      class="relative w-6 h-6 cursor-pointer"
      aria-label="Toggle menu"
    >
      <HamburgerIcon
        client:load
        hamburgerTransform={mobile.hamburgerTransform}
        checkboxId={mobile.checkboxId}
      />
    </label>

    <HamburgerMenu
      client:media={breakpoint}
      checkboxId={mobile.checkboxId}
      allItems={allMenuEntries}
      shared={{ collection, query, sortBy, sortOrder, HasPage }}
      cfg={{ itemsClass: mobile.itemsClass, menuItem: mobile.menuItem }}
    />
  </div>
)}
