---
// src/components/Menu/Menu.astro
import ItemsTemplate from "@/components/ItemsTemplates/ItemsTemplate.astro";
import { queryItems } from "@/utils/CollectionQueryUtils.js";
import { sortItems } from "@/utils/sortItems.js";
import HamburgerMenu from "./HamburgerMenu/HamburgerMenu.jsx";
import HamburgerIcon from "./HamburgerMenu/HamburgerIcon";
import { desktopDefaults, mobileDefaults } from "./defaults.js";
import { getRootItems } from "@/utils/menuUtils";
import "./styles.css";

const {
  // core data + sort
  collection    = "menuItems",
  query         = "relatedItem:menus:mainMenu",
  sortBy,
  sortOrder     = "asc",
  manualOrder   = true,
  HasPage       = false,

  // responsive
  responsive    = false,
  breakpoint    = "(max-width: 767px)",
  hamburgerOnly = false,

  // overrides
  desktop: desktopProp = {},
  mobile:  mobileProp  = {},
  itemsClass: topItemsClass,
  itemClass:  topItemClass,
  menuItem:   topMenuItem,

  // your new label & icon classes:
  checkboxId:          topCheckboxId,
  hamburgerTransform:  topHamburgerTransform,
  hamburgerLabelClass: topHamburgerLabelClass,
  hamburgerIconClass:  topHamburgerIconClass,
} = Astro.props;

// ─── fetch & sort all menu items ─────────────────────────────────
let allMenuEntries = [];
if (collection && query) {
  allMenuEntries = await queryItems(query, collection, Astro.url.pathname);
}
const sortedMobileItems = Array.isArray(allMenuEntries)
  ? sortItems(allMenuEntries, sortBy, sortOrder, manualOrder)
  : allMenuEntries;

// ─── top‐level roots for desktop & mobile first‐level ───────────────
const desktopRoots = getRootItems(allMenuEntries);

// ─── build final desktop & mobile configs ─────────────────────────
let desktopConfig, mobileConfig;

if (responsive) {
  // desktop deep-merge
  const overrideDesktopMI = desktopProp.menuItem || {};
  desktopConfig = {
    ...desktopDefaults,
    ...desktopProp,
    itemsClass: topItemsClass ?? desktopProp.itemsClass ?? desktopDefaults.itemsClass,
    itemClass:  topItemClass  ?? desktopProp.itemClass  ?? desktopDefaults.itemClass,
    menuItem: {
      component: overrideDesktopMI.component ?? desktopDefaults.menuItem.component,
      props: {
        ...desktopDefaults.menuItem.props,
        ...overrideDesktopMI.props,
      },
    },
  };

  // mobile deep-merge + pull in label/icon classes
  const overrideMobileMI = mobileProp.menuItem || {};
  mobileConfig = {
    ...mobileDefaults,
    ...mobileProp,
    itemsClass:         topItemsClass        ?? mobileProp.itemsClass        ?? mobileDefaults.itemsClass,
    itemClass:          topItemClass         ?? mobileProp.itemClass         ?? mobileDefaults.itemClass,
    menuItem: {
      component: overrideMobileMI.component ?? mobileDefaults.menuItem.component,
      props: {
        ...mobileDefaults.menuItem.props,
        ...overrideMobileMI.props,
      },
    },
    checkboxId:         topCheckboxId        ?? mobileProp.checkboxId        ?? mobileDefaults.checkboxId,
    hamburgerTransform: topHamburgerTransform ?? mobileProp.hamburgerTransform ?? mobileDefaults.hamburgerTransform,
    hamburgerLabelClass: topHamburgerLabelClass
      ?? mobileProp.hamburgerLabelClass
      ?? mobileDefaults.hamburgerLabelClass,
    hamburgerIconClass:  topHamburgerIconClass
      ?? mobileProp.hamburgerIconClass
      ?? mobileDefaults.hamburgerIconClass,
  };
}
else if (hamburgerOnly) {
  // only mobile
  const overrideMobileMI = topMenuItem || mobileProp.menuItem || {};
  mobileConfig = {
    ...mobileDefaults,
    ...mobileProp,
    itemsClass:         topItemsClass        ?? mobileProp.itemsClass        ?? mobileDefaults.itemsClass,
    itemClass:          topItemClass         ?? mobileProp.itemClass         ?? mobileDefaults.itemClass,
    menuItem: {
      component: overrideMobileMI.component ?? mobileDefaults.menuItem.component,
      props: {
        ...mobileDefaults.menuItem.props,
        ...overrideMobileMI.props,
      },
    },
    checkboxId:         topCheckboxId        ?? mobileProp.checkboxId        ?? mobileDefaults.checkboxId,
    hamburgerTransform: topHamburgerTransform ?? mobileProp.hamburgerTransform ?? mobileDefaults.hamburgerTransform,
    hamburgerLabelClass: topHamburgerLabelClass
      ?? mobileProp.hamburgerLabelClass
      ?? mobileDefaults.hamburgerLabelClass,
    hamburgerIconClass:  topHamburgerIconClass
      ?? mobileProp.hamburgerIconClass
      ?? mobileDefaults.hamburgerIconClass,
  };
}
else {
  // only desktop
  const overrideDesktopMI = topMenuItem || desktopProp.menuItem || {};
  desktopConfig = {
    ...desktopDefaults,
    ...desktopProp,
    itemsClass: topItemsClass ?? desktopProp.itemsClass ?? desktopDefaults.itemsClass,
    itemClass:  topItemClass  ?? desktopProp.itemClass  ?? desktopDefaults.itemClass,
    menuItem: {
      component: overrideDesktopMI.component ?? desktopDefaults.menuItem.component,
      props: {
        ...desktopDefaults.menuItem.props,
        ...overrideDesktopMI.props,
      },
    },
  };
}

// ─── center & bump up weight on mobile items ───────────────────────
if (mobileConfig) {
  mobileConfig.itemsClass = `${mobileConfig.itemsClass} flex flex-col justify-center items-center`;
  mobileConfig.menuItem.props.itemClass = mobileConfig.menuItem.props.itemClass
    .replace(/h5/g, "h2")
    .replace(/h6/g, "h2");
}
---

{!responsive && !hamburgerOnly && (
  // <!-- Desktop only -->
  <nav aria-label="Main">
    <ItemsTemplate
      items={desktopRoots}
      collection={collection}
      query={query}
      sortBy={sortBy}
      sortOrder={sortOrder}
      manualOrder={manualOrder}
      HasPage={HasPage}
      itemsClass={desktopConfig.itemsClass}
      itemClass={desktopConfig.itemClass}
      role="menubar"
      ItemComponent={{
        component: desktopConfig.menuItem.component,
        props: {
          ...desktopConfig.menuItem.props,
          allItems: sortedMobileItems,
          collectionName: collection,
        },
      }}
    />
  </nav>
)}

{responsive && !hamburgerOnly && (
  <>
    {/* <!-- Desktop at md+ --> */}
    <div class="hidden md:block">
      <nav aria-label="Main">
        <ItemsTemplate
          items={desktopRoots}
          collection={collection}
          query={query}
          sortBy={sortBy}
          sortOrder={sortOrder}
          manualOrder={manualOrder}
          HasPage={HasPage}
          itemsClass={desktopConfig.itemsClass}
          itemClass={desktopConfig.itemClass}
          role="menubar"
          ItemComponent={{
            component: desktopConfig.menuItem.component,
            props: {
              ...desktopConfig.menuItem.props,
              allItems: sortedMobileItems,
              collectionName: collection,
            },
          }}
        />
      </nav>
    </div>

    {/* <!-- Mobile at sm–md --> */}
    <div class="block md:hidden">
      <input type="checkbox" id={mobileConfig.checkboxId} class="hidden" />
       <label
      for={mobileConfig.checkboxId}
      class={mobileConfig.hamburgerLabelClass}
      aria-label="Toggle menu"
    >
        <HamburgerIcon
          client:media={breakpoint}
          checkboxId={mobileConfig.checkboxId} 
          hamburgerTransform={mobileConfig.hamburgerTransform}
          className={mobileConfig.hamburgerIconClass}
        />
      </label>

      <HamburgerMenu
        client:media={breakpoint}
        checkboxId={mobileConfig.checkboxId}
        allItems={allMenuEntries}
        shared={{
          collection,
          query,
          sortBy,
          sortOrder,
          HasPage,
        }}
        cfg={{
          itemsClass: mobileConfig.itemsClass,
          menuItem:   mobileConfig.menuItem,
        }}
      />
    </div>
  </>
)}

{hamburgerOnly && (
  // <!-- Hamburger only everywhere -->
  <div class="block">
    <input type="checkbox" id={mobileConfig.checkboxId} class="hidden" />
    <label
      for={mobileConfig.checkboxId}
      class={`${mobileConfig.hamburgerLabelClass}`}
      aria-label="Toggle menu"
    >
       <HamburgerIcon
          client:media={breakpoint}
          checkboxId={mobileConfig.checkboxId} 
          hamburgerTransform={mobileConfig.hamburgerTransform}
          className={mobileConfig.hamburgerIconClass}
        />
    </label>

    <HamburgerMenu
      client:load
      checkboxId={mobileConfig.checkboxId}
      allItems={allMenuEntries}
      shared={{
        collection,
        query,
        sortBy,
        sortOrder,
        HasPage,
      }}
      cfg={{
        itemsClass: mobileConfig.itemsClass,
        menuItem:   mobileConfig.menuItem,
      }}
    />
  </div>
)}
