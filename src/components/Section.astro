---
/**
 * Section Component â€“ Order of Importance for Heading and Description Values:
 *
 * 1. **Section Override:** 
 *    - Use the values passed directly via the Section props (i.e. the "heading" and "description" props).
 *
 * 2. **Meta Values:**
 *    - If no direct override is provided, load the collection meta file (_meta.mdx, _meta.md, or _meta.json)
 *      and use the "heading" and "description" defined there.
 *
 * 3. **Auto-Fallback:**
 *    - If neither the Section props nor the meta file provide a value, automatically generate a default.
 *      For the heading, this fallback is the collection slug capitalized (e.g., "services" becomes "Services").
 *
 * This hierarchy ensures that the highest priority values are used where explicitly provided, 
 * while sensible defaults are always available.
 */
import Heading from "./Heading.jsx";
import Button from "./Button.jsx";
import ItemsTemplate from "./ItemsTemplate.astro";
import { getCollectionMeta } from "@/utils/FetchMeta";
import { capitalize } from "@/utils/ContentUtils";
import { queryItems } from "@/utils/CollectionQueryUtils.js";
import { shouldShowSectionButton, getDefaultButtonText } from "@/utils/ButtonVisibilityUtils";

const {
  collection: collectionName,
  query: queryType,
  component: ItemComponent,
  heading,
  description,
  buttons,
  buttonsSectionClass,
  sectionClass,
  itemsClass,
  itemClass,
  contentClass,
  ...props
} = Astro.props;

const descriptionObj =
  typeof description === "string" ? { text: description } : description || {};

const directHeadingArray = heading
  ? (Array.isArray(heading) ? heading : [heading])
  : [];

async function loadMeta() {
  let meta = { heading: null, description: "", hasPage: false, itemsHasPage: true };
  if (collectionName && queryType) {
    const { heading: metaHeading, description: metaDesc = "", hasPage = false, itemsHasPage = true, ...restMeta } =
      await getCollectionMeta(collectionName);
    meta = { heading: metaHeading, description: metaDesc, hasPage, itemsHasPage, ...restMeta };
  }
  return meta;
}

let finalHeadingArray = [];
const meta = await loadMeta();
if (directHeadingArray.length > 0) {
  finalHeadingArray = directHeadingArray;
} else if (meta.heading) {
  finalHeadingArray = Array.isArray(meta.heading) ? meta.heading : [meta.heading];
} else {
  finalHeadingArray = [{ text: capitalize(collectionName), tagName: "h2" }];
}

const isDynamic = Boolean(collectionName && queryType);
let items = [];
if (isDynamic) {
  items = await queryItems(queryType, collectionName, Astro.url.pathname);
  if (items.length === 0) {
    return;
  }
}

const defaultButton = {
  text: getDefaultButtonText(collectionName),
  link: `/${collectionName}`,
  ifButton: collectionName ? meta.hasPage : false,
  class: ""
};

const finalShowButton = shouldShowSectionButton(
  collectionName,
  meta.hasPage,
  Astro.url.pathname
);

const buttonsArray =
  buttons && Array.isArray(buttons)
    ? buttons
    : finalShowButton
      ? [defaultButton]
      : [];

const itemsDefaultHasPage = meta.itemsHasPage ?? false;

// Allow buttonsSectionClass to be either a string or an object with a "class" property.
const containerClasses =
buttonsSectionClass !== undefined ? buttonsSectionClass : "mt-4 space-x-2";
---
{isDynamic ? (
  <section
    class={`${sectionClass} w-full py-6 lg:px-15`}
    data-collection={collectionName}
    {...props}
  >
    <div class={`${contentClass} w-3/4 my-6`}>
      <div>
        {finalHeadingArray.map((head, i) => {
          const headObj = typeof head === "string" ? { text: head } : head;
          const tagName = headObj.tagName || "h2";
          return (
            <Heading key={i} tagName={tagName} className={headObj.class || ""}>
              {headObj.text}
            </Heading>
          );
        })}
        {(descriptionObj.text || meta.description) && (
          <p class={descriptionObj.class}>
            {descriptionObj.text ?? meta.description}
          </p>
        )}
      </div>
      <slot name="aboveItemsInjection" />
      <ItemsTemplate
        items={items}
        collection={collectionName}
        query={queryType}
        itemsClass={itemsClass}
        itemClass={itemClass}
        ItemComponent={ItemComponent}
        HasPage={itemsDefaultHasPage}
        pathname={Astro.url.pathname}
      />
      <slot name="belowItemsInjection" />
      <div class={containerClasses}>
        {buttonsArray.length > 0 &&
          buttonsArray.map((btn, index) => {
            const btnDefaults = {
              text: getDefaultButtonText(collectionName),
              link: `/${collectionName}`,
              class: ""
            };
            const finalButtonProps = { ...btnDefaults, ...btn };
            return (
              <Button
                key={index}
                href={finalButtonProps.link}
                classname={finalButtonProps.class}
                ariaLabel={finalButtonProps.text}
              >
                {finalButtonProps.text}
              </Button>
            );
          })}
      </div>
      <slot />
    </div>
  </section>
) : (
  <section class={`${sectionClass} w-full lg:px-15`} {...props}>
    <div class={`${contentClass} w-3/4`}>
      {finalHeadingArray.map((head, i) => {
        const headObj = typeof head === "string" ? { text: head } : head;
        const tagName = headObj.tagName || "h2";
        return (
          <Heading key={i} tagName={tagName} className={headObj.class || ""}>
            {headObj.text}
          </Heading>
        );
      })}
      {descriptionObj.text && (
        <p class={descriptionObj.class}>{descriptionObj.text}</p>
      )}
      <slot />
      <div class={containerClasses}>
        {buttonsArray.length > 0 &&
          buttonsArray.map((btn, index) => {
            const btnDefaults = {
              text: getDefaultButtonText(collectionName),
              link: `/${collectionName}`,
              class: ""
            };
            const finalButtonProps = { ...btnDefaults, ...btn };
            return (
              <Button
                key={index}
                href={finalButtonProps.link}
                classname={finalButtonProps.class}
                ariaLabel={finalButtonProps.text}
              >
                {finalButtonProps.text}
              </Button>
            );
          })}
      </div>
    </div>
  </section>
)}
