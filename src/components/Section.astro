---
// src/components/Section.astro
/**
 * src/components/Section.astro
 *
 * This version retains dynamic querying and an optional “View All” button.
 * Instead of handling the item looping directly, it delegates that work to ItemsTemplate.
 *
 * Props:
 *  - collection: (string) E.g., "services", "projects", ... (optional)
 *  - query: (string) E.g., "getAll", "related", ... (optional)
 *  - component: (React component) Optional custom item component for ItemsTemplate
 *  - heading: (string) If provided, overrides the default heading
 *  - description: (string) If provided, overrides the meta description
 *  - ifButton: (boolean) Manually control if the "View All" button is present.
 *              When not provided and a collection exists, defaults to meta.hasPage.
 *              Otherwise, defaults to false.
 *  - buttonLink: (string) Custom link for the button (defaults to `/${collectionName}`)
 *  - sectionClass: (string) Additional classes for the <section> wrapper
 *  - itemClass: (string) Classes for the <ul> that wraps the <li> items (passed to ItemsTemplate)
 */

 import Heading from "./Heading.jsx";
import Card from "./Card.jsx";
import Button from "./Button.jsx";
import ItemsTemplate from "./ItemsTemplate.jsx"; // New import for modular item looping
import { getCollectionMeta } from "@/utils/FetchMeta";
import { capitalize } from "@/utils/ContentUtils";

const {
  collection: collectionName,
  query: queryType,
  component: ItemComponent,
  heading,
  description,
  ifButton,
  buttonLink,
  sectionClass,
  itemClass,
  ...props
} = Astro.props;

// Use the custom buttonLink if provided, otherwise default to `/${collectionName}`
const finalButtonLink = buttonLink || `/${collectionName}`;

// Detect dynamic mode based on whether a collection and query are provided.
const isDynamic = Boolean(collectionName && queryType);

// Initialize meta (we only need meta in dynamic mode)
let meta = { description: "", hasPage: false };
if (isDynamic) {
  const { description: desc = "", hasPage = false, ...restMeta } = await getCollectionMeta(collectionName);
  meta = { description: desc, hasPage, ...restMeta };
}

// Decide if we show the “View All” button.
const showButton =
  typeof ifButton === "boolean"
    ? ifButton
    : (collectionName ? meta.hasPage : false);

const isCollectionRootPage =
  Astro.url.pathname === `/${collectionName}` ||
  Astro.url.pathname === `/${collectionName}/`;
const finalShowButton = showButton && !isCollectionRootPage;
---
{isDynamic ? (
  <section class={sectionClass} data-collection={collectionName} {...props}>
    <Heading tagName="h2" size="h2">
      {heading ?? capitalize(collectionName)}
    </Heading>

    {/* If a description prop or meta.description is present, display it */}
    {(description || meta.description) && (
      <p>{description ?? meta.description}</p>
    )}

    {/* Render items using the ItemsTemplate component */}
    <ItemsTemplate 
      collection={collectionName}
      query={queryType}
      itemClass={itemClass}
      ItemComponent={ItemComponent}
    />

    {/* Conditionally show a “View All” button if finalShowButton is true */}
    {finalShowButton && (
        <Button href={finalButtonLink} classname="some-classes">
          View All {capitalize(collectionName)}
        </Button>
    )}

    <slot />
  </section>
) : (
  // If no dynamic data is provided, render a static <section>.
  <section class={sectionClass} {...props}>
    {heading && (
      <Heading tagName="h2" size="h2">
        {heading}
      </Heading>
    )}
    {description && <p>{description}</p>}

    <slot />

    {/* Conditionally show a “View All” button if finalShowButton is true */}
    {finalShowButton && (
        <Button href={buttonLink} classname="some-classes">
          Learn More
        </Button>
    )}
  </section>
)}
