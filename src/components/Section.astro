---
import Heading from "./Heading.jsx";
import Button from "./Button.jsx";
import ItemsTemplate from "./ItemsTemplate.astro";
import { getCollectionMeta } from "@/utils/FetchMeta";
import { capitalize } from "@/utils/ContentUtils";
import { queryItems } from "@/utils/CollectionQueryUtils.js";
import { shouldShowSectionButton, getDefaultButtonText } from "@/utils/ButtonVisibilityUtils";

const {
  collection: collectionName, // This is assumed to be the collection slug.
  query: queryType,
  component: ItemComponent,
  heading,       // Passed directly to Section
  description,   // Passed directly to Section
  button,
  sectionClass,
  itemsClass,
  itemClass,
  contentClass,
  ...props
} = Astro.props;

// Normalize description prop (string -> object)
const descriptionObj =
  typeof description === 'string' ? { text: description } : description || {};

// Normalize a direct heading value into an array (if provided)
const directHeadingArray = heading
  ? (Array.isArray(heading) ? heading : [heading])
  : [];

// Define a helper to load meta values (which come from your _meta file)
async function loadMeta() {
  let meta = { heading: null, description: "" , hasPage: false, itemsHasPage: true };
  if (collectionName && queryType) {
    const { heading: metaHeading, description: metaDesc = "", hasPage = false, itemsHasPage = true, ...restMeta } =
      await getCollectionMeta(collectionName);
    meta = { heading: metaHeading, description: metaDesc, hasPage, itemsHasPage, ...restMeta };
  }
  return meta;
}

// Determine final heading array based on the order of importance:
// 1. Section override (directHeadingArray)
// 2. Meta heading value
// 3. Auto-fallback: collection slug (capitalized)
let finalHeadingArray = [];
const meta = await loadMeta();
if (directHeadingArray.length > 0) {
  finalHeadingArray = directHeadingArray;
} else if (meta.heading) {
  finalHeadingArray = Array.isArray(meta.heading) ? meta.heading : [meta.heading];
} else {
  finalHeadingArray = [{ text: capitalize(collectionName), tagName: "h2" }];
}

// Fetch items (if dynamic)
const isDynamic = Boolean(collectionName && queryType);
let items = [];
if (isDynamic) {
  items = await queryItems(queryType, collectionName, Astro.url.pathname);
  if (items.length === 0) {
    return;
  }
}

// Compute default button object.
const defaultButton = {
  text: getDefaultButtonText(collectionName),
  link: `/${collectionName}`,
  ifButton: collectionName ? meta.hasPage : false,
  class: ''
};
const buttonObj = button ? { ...defaultButton, ...button } : defaultButton;

// Determine if the section button should be shown.
const finalShowButton = shouldShowSectionButton(
  collectionName,
  meta.hasPage,
  Astro.url.pathname,
  button ? { ifButton: buttonObj.ifButton } : undefined
);

// Default for individual items.
const itemsDefaultHasPage = meta.itemsHasPage ?? false;
---
{isDynamic ? (
  <section
    class={`${sectionClass} w-full py-6 lg:px-15`}
    data-collection={collectionName}
    {...props}
  >
    <div class={`${contentClass} w-3/4 my-6`}>
      <div>
        {finalHeadingArray.map((head, i) => {
          // Convert a string to an object if necessary.
          const headObj = typeof head === 'string' ? { text: head } : head;
          const tagName = headObj.tagName || "h2";
          return (
            <Heading key={i} tagName={tagName} className={headObj.class || ''}>
              {headObj.text}
            </Heading>
          );
        })}
        {(descriptionObj.text || meta.description) && (
          <p class={descriptionObj.class}>
            {descriptionObj.text ?? meta.description}
          </p>
        )}
      </div>

      <!-- Optional slot for custom content above items -->
      <slot name="aboveItemsInjection" />

      <!-- Render items -->
      <ItemsTemplate
        items={items}
        collection={collectionName}
        query={queryType}
        itemsClass={itemsClass}
        itemClass={itemClass}
        ItemComponent={ItemComponent}
        HasPage={itemsDefaultHasPage}
        pathname={Astro.url.pathname}
      />

      <!-- Optional slot for custom content below items -->
      <slot name="belowItemsInjection" />

      {finalShowButton && (
        <Button
          href={buttonObj.link}
          classname={buttonObj.class}
          ariaLabel={buttonObj.text}
        >
          {buttonObj.text}
        </Button>
      )}

      <slot />
    </div>
  </section>
) : (
  <section class={`${sectionClass} w-full lg:px-15`} {...props}>
    <div class={`${contentClass} w-3/4`}>
      {finalHeadingArray.map((head, i) => {
        const headObj = typeof head === 'string' ? { text: head } : head;
        const tagName = headObj.tagName || "h2";
        return (
          <Heading key={i} tagName={tagName} className={headObj.class || ''}>
            {headObj.text}
          </Heading>
        );
      })}
      {descriptionObj.text && (
        <p class={descriptionObj.class}>
          {descriptionObj.text}
        </p>
      )}
      <slot />
      {finalShowButton && (
        <Button
          href={buttonObj.link}
          classname={buttonObj.class}
          ariaLabel={buttonObj.text}
        >
          {buttonObj.text}
        </Button>
      )}
    </div>
  </section>
)}
