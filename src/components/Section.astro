---
/**
 * src/components/Section.astro
 *
 * This version retains dynamic querying and an optional “View All” button:
 *   - Accepts `collection + query` => loads items from that collection (`queryItems`).
 *   - If “ifButton” is true (or if not provided and a collection exists then meta.hasPage is used),
 *     displays a "View All" button (unless we’re already on /collectionName).
 *   - If no collection+query is provided, simply renders a static <section>.
 *   - The items are rendered inside a <ul> (with class set via itemClass), with each item in a <li>.
 *
 * Props:
 *  - collection: (string) E.g., "services", "projects", ...
 *  - query: (string) E.g., "getAll", "related", ...
 *  - component: (React component) Optional custom item component
 *  - heading: (string) If provided, overrides the default heading
 *  - description: (string) If provided, overrides the meta description
 *  - ifButton: (boolean) Manually control if the "View All" button is present.
 *              When not provided and a collection exists, defaults to meta.hasPage.
 *              Otherwise, defaults to false.
 *  - buttonLink: (string) Custom link for the button (defaults to `/${collectionName}`)
 *  - sectionClass: (string) Additional classes for the <section> wrapper
 *  - itemClass: (string) Classes for the <ul> that wraps the <li> items
 */

 import Heading from "./Heading.jsx";
import Card from "./Card.jsx";
import Button from "./Button.jsx";
import { queryItems } from "@/utils/QueryUtils";
import { getCollectionMeta } from "@/utils/FetchMeta";
import { capitalize } from "@/utils/ContentUtils";

const {
  collection: collectionName,
  query: queryType,
  component: ItemComponent,
  heading,
  description,
  ifButton,
  buttonLink,
  sectionClass,
  itemClass,
  ...props
} = Astro.props;

// Use the custom buttonLink if provided, otherwise default to `/${collectionName}`
const finalButtonLink = buttonLink || `/${collectionName}`;

// Detect dynamic mode
const isDynamic = Boolean(collectionName && queryType);

// Initialize items & meta
let items = [];
let meta = { description: "", hasPage: false };

if (isDynamic) {
  // 1) Get collection-level meta
  const { description: desc = "", hasPage = false, ...restMeta } = await getCollectionMeta(collectionName);
  meta = { description: desc, hasPage, ...restMeta };

  // 2) Query items for this section
  items = await queryItems(queryType, collectionName, Astro.url.pathname);
}

// Decide if we show “View All” button.
// If ifButton is explicitly provided, use that.
// Otherwise, if collectionName exists, fallback to meta.hasPage; if not, default to false.
const showButton =
  typeof ifButton === "boolean"
    ? ifButton
    : (collectionName ? meta.hasPage : false);

const isCollectionRootPage =
  Astro.url.pathname === `/${collectionName}` ||
  Astro.url.pathname === `/${collectionName}/`;
const finalShowButton = showButton && !isCollectionRootPage;
---
{isDynamic ? (
  items.length > 0 && (
    <section class={sectionClass} data-collection={collectionName} {...props}>
      <Heading tagName="h2" size="h2">
        {heading ?? capitalize(collectionName)}
      </Heading>

      {/* If a "description" prop or meta.description is present, display it */}
      {(description || meta.description) && (
        <p>{description ?? meta.description}</p>
      )}

      {/* Render items inside a <ul> with class={itemClass} */}
      <ul class={itemClass}>
        {items.map((item) => {
          return (
            <li>
              {ItemComponent ? (
                <ItemComponent item={item} collectionName={collectionName} />
              ) : (
                <Card item={item} collectionName={collectionName} />
              )}
            </li>
          );
        })}
      </ul>

      {/* Conditionally show a “View All” button if finalShowButton is true */}
      {finalShowButton && (
        <div style="margin-top: 1rem;">
          <Button href={finalButtonLink} classname="some-classes">
            View All {capitalize(collectionName)}
          </Button>
        </div>
      )}

      <slot />
    </section>
  )
) : (
  // No dynamic data? Just render a static <section>.
  <section class={sectionClass} {...props}>
    {heading && (
      <Heading tagName="h2" size="h2">
        {heading}
      </Heading>
    )}
    {description && <p>{description}</p>}

    <slot />

      {/* Conditionally show a “View All” button if finalShowButton is true */}
      {finalShowButton && (
        <div style="margin-top: 1rem;">
          <Button href={buttonLink} classname="some-classes">
            Learn More
          </Button>
        </div>
      )}
  </section>
)}
