---
import Heading from "./Heading.jsx";
import Button from "./Button.jsx";
import ItemsTemplate from "./ItemsTemplate.astro";
import BackgroundMedia from "./BackgroundMedia.astro";  // <-- New import
import {
  resolveMetaProps,
  resolveHeading,
  resolveDescription,
  resolveButtonsArray,
  getSectionItems,
  resolveSectionStyles,
  resolveComponent,
} from "@/utils/SectionUtils";
import { getImage } from "astro:assets";
import { capitalize } from "@/utils/ContentUtils";

const {
  collection: collectionName,
  query: queryType,
  component: ItemComponent,
  heading,
  description,
  buttons,
  sectionClass,
  contentClass,
  itemsClass,
  itemClass,
  buttonsSectionClass,
  // Destructure headingAreaClass from Astro.props
  headingAreaClass,
  // Renamed from "background" to "backgroundMedia"
  backgroundMedia,
  ...props
} = Astro.props;

const meta = await resolveMetaProps(collectionName, queryType);
const defaultSection = meta.defaultSection || {};

// Merge style props with defaults.
const {
  finalSectionClass,
  finalContentClass,
  finalItemsClass,
  finalButtonsSectionClass,
} = resolveSectionStyles(
  { sectionClass, contentClass, itemsClass, buttonsSectionClass },
  defaultSection
);

// Merge headingAreaClass from Astro.props with the default from meta/defaultSection.
const finalHeadingAreaClass =
  headingAreaClass || defaultSection.headingAreaClass || "";

const finalHeadingArray = resolveHeading(heading, meta.heading, collectionName);
const finalDescription = resolveDescription(description, meta.description);
const finalComponent = resolveComponent(ItemComponent, defaultSection.component);

let items = [];
const isDynamic = Boolean(collectionName && queryType);
if (isDynamic) {
  items = await getSectionItems(queryType, collectionName, Astro.url.pathname);
  if (items.length === 0) return;
}

const buttonsArray = resolveButtonsArray(
  buttons,
  meta.hasPage,
  collectionName,
  Astro.url.pathname
);
const itemsDefaultHasPage = meta.itemsHasPage ?? false;
---

<!-- Outer section: relative for layering -->
<section
  class={`${finalSectionClass} relative w-full ${isDynamic ? "py-[var(--spacing-lg)] lg:px-[var(--spacing-md)]" : "lg:px-[var(--spacing-md)]"}`}
  data-collection={collectionName}
  {...props}
>
  {/* Use the modular BackgroundMedia component */}
  {backgroundMedia && <BackgroundMedia backgroundMedia={backgroundMedia} />}
  
  <!-- Content container: contains both the heading area and items -->
  <div class={`${finalContentClass} relative z-10 w-3/4 ${isDynamic ? "my-[var(--spacing-lg)]" : ""}`}>
    <div class={`section-heading-area ${finalHeadingAreaClass}`}>
      {finalHeadingArray.map((head, i) => {
        const headObj = typeof head === "string" ? { text: head } : head;
        const Tag = headObj.tagName || "h2";
        return (
          <Heading key={i} tagName={Tag} className={headObj.class || ""}>
            {headObj.text}
          </Heading>
        );
      })}
      {finalDescription && (
        <p class={description?.class}>
          {finalDescription}
        </p>
      )}
    </div>
    {isDynamic ? (
      <>
        <slot name="aboveItemsInjection" />
        <ItemsTemplate
          items={items}
          collection={collectionName}
          query={queryType}
          itemsClass={finalItemsClass}
          itemClass={itemClass}
          ItemComponent={finalComponent}
          HasPage={itemsDefaultHasPage}
          pathname={Astro.url.pathname}
        />
        <slot name="belowItemsInjection" />
        <div class={finalButtonsSectionClass}>
          {buttonsArray.length > 0 &&
            buttonsArray.map((btn, index) => {
              const btnDefaults = {
                text: capitalize(collectionName),
                link: `/${collectionName}`,
                class: "",
                variant: "primary",
              };
              const finalButtonProps = { ...btnDefaults, ...btn };
              return (
                <Button
                  key={index}
                  href={finalButtonProps.link}
                  className={finalButtonProps.class}
                  ariaLabel={finalButtonProps.text}
                  variant={finalButtonProps.variant}
                >
                  {finalButtonProps.text}
                </Button>
              );
            })}
        </div>
        <slot />
      </>
    ) : (
      <>
        <slot />
        <div class={finalButtonsSectionClass}>
          {buttonsArray.length > 0 &&
            buttonsArray.map((btn, index) => {
              const btnDefaults = {
                text: capitalize(collectionName),
                link: `/${collectionName}`,
                class: "",
                variant: "primary",
              };
              const finalButtonProps = { ...btnDefaults, ...btn };
              return (
                <Button
                  key={index}
                  href={finalButtonProps.link}
                  className={finalButtonProps.class}
                  ariaLabel={finalButtonProps.text}
                  variant={finalButtonProps.variant}
                >
                  {finalButtonProps.text}
                </Button>
              );
            })}
        </div>
      </>
    )}
  </div>
</section>
