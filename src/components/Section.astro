---
/**
 * src/components/Section.astro
 *
 * This version retains dynamic querying and an optional “View All” button.
 * Instead of handling the item looping directly, it delegates that work to ItemsTemplate.
 *
 * Props:
 *  - collection: (string) E.g., "services", "projects", ... (optional)
 *  - query: (string) E.g., "getAll", "related", ... (optional)
 *  - component: (React component) Optional custom item component for ItemsTemplate
 *  - heading: (string) If provided, overrides the default heading
 *  - description: (string) If provided, overrides the meta description
 *  - ifButton: (boolean) Manually control if the "View All" button is present.
 *              When not provided and a collection exists, defaults to meta.hasPage.
 *              Otherwise, defaults to false.
 *  - buttonLink: (string) Custom link for the button (defaults to `/${collectionName}`)
 *  - sectionClass: (string) Additional classes for the <section> wrapper
 *  - itemClass: (string) Classes for the <ul> that wraps the <li> items (passed to ItemsTemplate)
 *  - contentClass: (string) Additional classes for a wrapping <div> inside the section for content styling.
 */
/**
 * src/components/Section.astro
 *
 * This version retains dynamic querying and an optional “View All” button.
 * Instead of handling the item looping directly, it delegates that work to ItemsTemplate.
 *
 * Props:
 *  - collection: (string) E.g., "services", "projects", ... (optional)
 *  - query: (string) E.g., "getAll", "related", ... (optional)
 *  - component: (React component) Optional custom item component for ItemsTemplate
 *  - heading: string | { text: string, class?: string, ... }
 *  - description: string | { text: string, class?: string, ... }
 *  - button: { text?: string, link?: string, ifButton?: boolean, class?: string }
 *    (When a string is provided for heading/description, it auto-converts to an object.)
 *  - sectionClass, itemsClass, itemClass, contentClass: additional CSS classes.
 */
import Heading from "./Heading.jsx";
import Button from "./Button.jsx";
import ItemsTemplate from "./ItemsTemplate.astro";
import { getCollectionMeta } from "@/utils/FetchMeta";
import { capitalize } from "@/utils/ContentUtils";
import { queryItems } from "@/utils/CollectionQueryUtils.js";

const {
  collection: collectionName,
  query: queryType,
  component: ItemComponent,
  // New unified props
  heading,
  description,
  button,
  sectionClass,
  itemsClass,
  itemClass,
  contentClass,
  ...props
} = Astro.props;

// Convert heading & description to objects if they are strings.
const headingObj =
  typeof heading === 'string' ? { text: heading } : heading || {};
const descriptionObj =
  typeof description === 'string' ? { text: description } : description || {};

// Fetch meta if dynamic.
const isDynamic = Boolean(collectionName && queryType);
let meta = { description: "", hasPage: false };
if (isDynamic) {
  const { description: desc = "", hasPage = false, ...restMeta } =
    await getCollectionMeta(collectionName);
  meta = { description: desc, hasPage, ...restMeta };
}

// Compute an effective heading object:
// Use the heading prop if provided; otherwise, if meta.heading exists, use it (converting string to object).
const effectiveHeadingObj = Object.keys(headingObj).length > 0
  ? headingObj
  : meta.heading
    ? (typeof meta.heading === 'string' ? { text: meta.heading } : meta.heading)
    : {};
    
// Determine the heading text; if not found, default to the capitalized collection name.
const effectiveHeadingText = effectiveHeadingObj.text || capitalize(collectionName);

// Fetch items if dynamic.
let items = [];
if (isDynamic) {
  items = await queryItems(queryType, collectionName, Astro.url.pathname);
  if (items.length === 0) {
    return;
  }
}

// Compute default button object using legacy defaults.
const defaultButton = {
  text: `View All ${capitalize(collectionName)}`,
  link: `/${collectionName}`,
  ifButton: collectionName ? meta.hasPage : false,
  class: ''
};

// Merge button object overrides (if provided).
const buttonObj = button ? { ...defaultButton, ...button } : defaultButton;

// Determine if the button should be shown.
// If a manual button prop is provided, its ifButton value is used directly; otherwise, auto-detection hides the button on collection root pages.
const isCollectionRootPage =
  Astro.url.pathname === `/${collectionName}` ||
  Astro.url.pathname === `/${collectionName}/`;
const finalShowButton = button ? buttonObj.ifButton : (buttonObj.ifButton && !isCollectionRootPage);

// Generate a unique heading id if a heading exists.
const headingId = effectiveHeadingText
  ? (collectionName ? `section-heading-${collectionName}` : "section-heading")
  : null;
---
{isDynamic ? (
  <section
    class={`${sectionClass} w-full py-6 lg:px-15`}
    data-collection={collectionName}
    aria-labelledby={headingId}
    {...props}
  >
    <div class={`${contentClass} w-3/4 my-6`}>
      <div>
        <Heading tagName="h2" id={headingId} className={effectiveHeadingObj.class || ''}>
          {effectiveHeadingText}
        </Heading>
        {(descriptionObj.text || meta.description) && (
          <p class={descriptionObj.class}>
            {descriptionObj.text ?? meta.description}
          </p>
        )}
      </div>

      <!-- Optional slot for custom content above items -->
      <slot name="aboveItemsInjection" />

      <!-- Render items -->
      <ItemsTemplate
        items={items}
        collection={collectionName}
        query={queryType}
        itemsClass={itemsClass}
        itemClass={itemClass}
        ItemComponent={ItemComponent}
        pathname={Astro.url.pathname}
      />

      <!-- Optional slot for custom content below items -->
      <slot name="belowItemsInjection" />

      {finalShowButton && (
        <Button
          href={buttonObj.link}
          classname={buttonObj.class}
          ariaLabel={buttonObj.text}
        >
          {buttonObj.text}
        </Button>
      )}

      <slot />
    </div>
  </section>
) : (
  <section
    class={`${sectionClass} w-full lg:px-15`}
    aria-labelledby={headingId}
    {...props}
  >
    <div class={`${contentClass} w-3/4`}>
      {effectiveHeadingText && (
        <Heading tagName="h2" className={effectiveHeadingObj.class || ''} id={headingId}>
          {effectiveHeadingText}
        </Heading>
      )}
      {descriptionObj.text && (
        <p class={descriptionObj.class}>
          {descriptionObj.text}
        </p>
      )}
      <slot />
      {finalShowButton && (
        <Button
          href={buttonObj.link}
          classname={buttonObj.class}
          ariaLabel={buttonObj.text}
        >
          {buttonObj.text}
        </Button>
      )}
    </div>
  </section>
)}
