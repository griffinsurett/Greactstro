---
// src/components/Section/Variants/Hero.astro
// Simplified Hero variant component to fix the "get" error
interface Props {
  heading?: string;
  description?: string;
  buttons?: any[];
  backgroundImage?: string;
  overlayOpacity?: number;
  minHeight?: string;
  textColor?: string;
  backgroundColor?: string;
  sectionPadding?: string;
  showBadge?: boolean;
  badgeText?: string;
  showStats?: boolean;
  stats?: Array<{ number: string; label: string }>;
  showScrollIndicator?: boolean;
  collectionData?: any[];
  meta?: any;
}

const {
  heading = "Hero Title",
  description = "Hero description goes here",
  buttons = [],
  backgroundImage,
  overlayOpacity = 50,
  minHeight = "100vh",
  textColor = "text-white",
  backgroundColor,
  sectionPadding = "py-14",
  showBadge = true,
  badgeText = "âœ¨ Trusted by 500+ companies",
  showStats = true,
  stats = [
    { number: "500+", label: "Happy Clients" },
    { number: "1000+", label: "Projects Delivered" },
    { number: "24/7", label: "Support" }
  ],
  showScrollIndicator = true,
  collectionData = [],
  meta = {}
} = Astro.props;

// Simple fallback logic without complex operations
const finalHeading = heading;
const finalDescription = description;
const finalButtons = buttons || [];
const finalBackgroundImage = backgroundImage;

// Simple background class check
const bgClass = backgroundColor && backgroundColor.startsWith('bg-') ? backgroundColor : '';
const bgStyle = backgroundColor && !backgroundColor.startsWith('bg-') ? `background: ${backgroundColor}` : '';
---

<div class={`hero-variant relative w-full overflow-hidden ${sectionPadding}`} style={`min-height: ${minHeight}`}>
  <!-- Background -->
  {finalBackgroundImage ? (
    <div 
      class="absolute inset-0 bg-cover bg-center bg-fixed z-0"
      style={`background-image: url(${finalBackgroundImage})`}
    >
      <div 
        class="absolute inset-0 bg-gradient-to-br from-black/60 via-black/40 to-black/60"
        style={`opacity: ${overlayOpacity / 100}`}
      ></div>
    </div>
  ) : (
    <div class={`absolute inset-0 opacity-90 ${bgClass}`} style={bgStyle || 'background: linear-gradient(135deg, #2563eb 0%, #7c3aed 50%, #059669 100%)'}>
    </div>
  )}
  
  <!-- Animated background elements -->
  <div class="absolute inset-0 z-0">
    <div class="absolute top-20 left-20 w-72 h-72 bg-white/10 rounded-full blur-3xl animate-pulse"></div>
    <div class="absolute bottom-20 right-20 w-96 h-96 bg-white/5 rounded-full blur-3xl animate-pulse delay-1000"></div>
    <div class="absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 w-[800px] h-[800px] bg-white/5 rounded-full blur-3xl animate-pulse delay-500"></div>
  </div>
  
  <!-- Main content -->
  <div class="relative z-10 flex items-center justify-center h-full px-4 sm:px-6 lg:px-8">
    <div class="text-center max-w-6xl mx-auto">
      
      <!-- Badge -->
      {showBadge && (
        <div class="inline-flex items-center px-4 py-2 rounded-full bg-white/10 backdrop-blur-sm border border-white/20 text-white text-sm font-medium mb-8 animate-fade-in-up">
          <span class="mr-2">âœ¨</span>
          {badgeText}
        </div>
      )}
      
      <!-- Main heading -->
      <slot name="heading">
        <h1 class="text-5xl sm:text-6xl lg:text-7xl xl:text-8xl font-bold mb-6 leading-tight animate-fade-in-up animation-delay-200">
          <span class="bg-gradient-to-r from-white via-gray-100 to-white bg-clip-text text-transparent">
            {finalHeading}
          </span>
        </h1>
      </slot>
      
      <!-- Description -->
      <slot name="description">
        <p class="text-xl sm:text-2xl lg:text-3xl mb-12 max-w-4xl mx-auto leading-relaxed opacity-90 animate-fade-in-up animation-delay-400">
          {finalDescription}
        </p>
      </slot>
      
      <!-- Buttons -->
      <slot name="buttons">
        {finalButtons.length > 0 ? (
          <div class="flex flex-col sm:flex-row gap-4 justify-center items-center mb-16 animate-fade-in-up animation-delay-600">
            {finalButtons.map((button: any) => (
              <a 
                href={button?.link || "#"} 
                class="group relative px-8 py-4 rounded-2xl font-semibold text-lg bg-white text-blue-600 hover:bg-gray-100 shadow-2xl transition-all duration-500 transform hover:scale-105 hover:-translate-y-1"
              >
                <span class="relative z-10">{button?.text || "Learn More"}</span>
              </a>
            ))}
          </div>
        ) : (
          <div class="flex flex-col sm:flex-row gap-4 justify-center items-center mb-16 animate-fade-in-up animation-delay-600">
            <a 
              href="/contact"
              class="group relative px-8 py-4 rounded-2xl font-semibold text-lg bg-white text-blue-600 hover:bg-gray-100 shadow-2xl transition-all duration-500 transform hover:scale-105 hover:-translate-y-1"
            >
              <span class="relative z-10">ðŸš€ Get Started</span>
            </a>
            <a 
              href="/about"
              class="px-8 py-4 rounded-2xl font-semibold text-lg bg-white/10 backdrop-blur-sm border-2 border-white/30 text-white hover:bg-white hover:text-blue-600 hover:border-white shadow-2xl transition-all duration-500 transform hover:scale-105 hover:-translate-y-1"
            >
              ðŸ“– Learn More
            </a>
          </div>
        )}
      </slot>
      
      <!-- Stats -->
      {showStats && (
        <div class="grid grid-cols-1 md:grid-cols-3 gap-8 mt-16 animate-fade-in-up animation-delay-800">
          {stats.map((stat) => (
            <div class="text-center">
              <div class="text-4xl sm:text-5xl font-bold text-white mb-2">
                {stat.number}
              </div>
              <div class="text-white/80 text-sm sm:text-base font-medium">
                {stat.label}
              </div>
            </div>
          ))}
        </div>
      )}
      
      <!-- Scroll indicator -->
      {showScrollIndicator && (
        <div class="absolute bottom-8 left-1/2 transform -translate-x-1/2 animate-bounce">
          <div class="w-6 h-10 border-2 border-white/30 rounded-full flex justify-center">
            <div class="w-1 h-3 bg-white/60 rounded-full mt-2 animate-pulse"></div>
          </div>
        </div>
      )}
      
      <slot />
    </div>
  </div>
</div>

<style>
  .hero-variant {
    background: linear-gradient(135deg, #2563eb 0%, #7c3aed 50%, #059669 100%);
  }
  
  /* Animation delays */
  .animation-delay-200 {
    animation-delay: 200ms;
  }
  
  .animation-delay-400 {
    animation-delay: 400ms;
  }
  
  .animation-delay-600 {
    animation-delay: 600ms;
  }
  
  .animation-delay-800 {
    animation-delay: 800ms;
  }
  
  /* Enhanced animations */
  .animate-fade-in-up {
    animation: enhancedFadeInUp 1s cubic-bezier(0.4, 0, 0.2, 1) forwards;
    opacity: 0;
    transform: translateY(30px);
  }
  
  @keyframes enhancedFadeInUp {
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }
  
  /* Responsive adjustments */
  @media (max-width: 768px) {
    .hero-variant {
      min-height: 90vh;
    }
    
    .hero-variant h1 {
      font-size: 3rem;
    }
    
    .hero-variant p {
      font-size: 1.125rem;
    }
  }
  
  @media (max-width: 640px) {
    .hero-variant {
      min-height: 80vh;
    }
    
    .hero-variant h1 {
      font-size: 2.5rem;
    }
  }
  
  /* Glassmorphism effects */
  .backdrop-blur-sm {
    backdrop-filter: blur(8px);
    -webkit-backdrop-filter: blur(8px);
  }
  
  /* Enhanced shadows */
  .shadow-2xl {
    box-shadow: 0 25px 50px -12px rgba(0, 0, 0, 0.25);
  }
</style>
