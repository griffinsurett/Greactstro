---
// src/components/Section/SimpleSection.astro
// Simplified Section component that works with collections and variants
import VariantWrapper from "./VariantWrapper.astro";

interface Props {
  variant?: string;
  variantProps?: Record<string, any>;
  collection?: string;
  query?: string;
  sectionClass?: string;
  id?: string;
}

const {
  variant,
  variantProps = {},
  collection,
  query,
  sectionClass = "",
  id,
  ...props
} = Astro.props;

// Load collection data
let collectionData: any[] = [];
let isDynamic = false;

if (collection && query) {
  try {
    const { getCollection } = await import("astro:content");
    const entries = await getCollection(collection as any);
    
    if (query === "getAll") {
      collectionData = entries;
    } else if (query === "featured") {
      collectionData = entries.filter((item: any) => item.data.featured);
    } else if (query === "recent") {
      collectionData = entries
        .sort((a: any, b: any) => new Date(b.data.date || 0).getTime() - new Date(a.data.date || 0).getTime())
        .slice(0, 6);
    } else {
      collectionData = entries;
    }
    
    isDynamic = true;
    console.log(`Loaded ${collectionData.length} items from collection "${collection}"`);
  } catch (error) {
    console.warn(`Could not load collection ${collection}:`, error);
  }
}

// Check if we should use variant system
const shouldUseVariant = variant && [
  'hero', 'twoCol', 'cardGrid', 'centered', 'simple',
  'masonry', 'tabs', 'accordion', 'customGrid'
].includes(variant);
---

<section 
  id={id}
  class={`${sectionClass} relative w-full`}
  data-collection={collection}
  data-query={query}
  {...props}
>
  {/* Collection info display */}
  {isDynamic && (
    <div class="bg-blue-50 border border-blue-200 rounded-lg p-4 mb-4">
      <h3 class="text-lg font-semibold text-blue-800 mb-2">Collection Props Detected</h3>
      <div class="text-sm text-blue-700 space-y-1">
        <p><strong>Collection:</strong> {collection}</p>
        <p><strong>Query:</strong> {query}</p>
        <p><strong>Variant:</strong> {variant || 'None'}</p>
        <p><strong>Items Loaded:</strong> {collectionData.length}</p>
      </div>
    </div>
  )}
  
  {/* Render collection data */}
  {isDynamic && collectionData.length > 0 && (
    <div class="collection-content mb-8">
      <div class="grid gap-6 md:grid-cols-2 lg:grid-cols-3">
        {collectionData.map((item: any) => (
          <div class="bg-white rounded-lg shadow-md p-6 hover:shadow-lg transition-shadow">
            {/* Icon */}
            {item.data.icon && (
              <div class="text-4xl mb-4 text-center">
                {item.data.icon}
              </div>
            )}
            
            {/* Title */}
            {item.data.title && (
              <h3 class="text-xl font-semibold mb-3 text-gray-800">
                {item.data.title}
              </h3>
            )}
            
            {/* Description */}
            {item.data.description && (
              <p class="text-gray-600 mb-4">
                {item.data.description}
              </p>
            )}
            
            {/* Featured Image */}
            {item.data.featuredImage && (
              <div class="mb-4">
                <img
                  src={item.data.featuredImage}
                  alt={item.data.title || 'Featured image'}
                  class="w-full h-48 object-cover rounded-lg"
                />
              </div>
            )}
            
            {/* Tags */}
            {item.data.tags && Array.isArray(item.data.tags) && item.data.tags.length > 0 && (
              <div class="flex flex-wrap gap-2 mt-4">
                {item.data.tags.map((tag: string) => (
                  <span class="px-2 py-1 bg-blue-100 text-blue-800 text-xs rounded-full">
                    {tag}
                  </span>
                ))}
              </div>
            )}
            
            {/* Featured badge */}
            {item.data.featured && (
              <div class="absolute top-4 right-4">
                <span class="px-2 py-1 bg-yellow-400 text-yellow-900 text-xs font-semibold rounded-full">
                  Featured
                </span>
              </div>
            )}
          </div>
        ))}
      </div>
    </div>
  )}
  
  {/* Render variant if specified */}
  {shouldUseVariant ? (
    <VariantWrapper 
      variant={variant} 
      variantProps={variantProps}
      collectionData={collectionData}
      meta={{}}
    >
      <slot />
    </VariantWrapper>
  ) : (
    <slot />
  )}
</section>
