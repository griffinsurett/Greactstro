---
// src/components/Section/Section.astro
/**
 * Section Component - Advanced variant system with content collection integration
 * 
 * Usage:
 * - Basic: <Section>Content here</Section>
 * - Variants: <Section variant="hero"><div slot="heading">Title</div></Section>
 * - Collection-based: <Section collection="services" query="featured" variant="cardGrid" />
 * - Advanced: <Section variant="customGrid" variantProps={{...}}>Content</Section>
 */
import VariantWrapper from "./VariantWrapper.astro";

const {
  // Basic props
  id,
  tagName = "section",
  variant,
  variantProps = {},
  
  // Content collection props
  collectionName,
  queryType,
  
  // Styling props
  sectionClass = "",
  
  ...props
} = Astro.props;

// Get collection data if specified
let collectionData: any[] = [];
let meta: any = null;

if (collectionName) {
  try {
    // Use dynamic import to avoid TypeScript issues with collection names
    const { getCollection } = await import("astro:content");
    const collectionEntries = await getCollection(collectionName as any);
    
    // Apply query filtering if specified
    if (queryType === "getAll" || queryType === "featured") {
      collectionData = collectionEntries;
    } else if (queryType === "recent") {
      collectionData = collectionEntries
        .sort((a: any, b: any) => new Date(b.data.date || 0).getTime() - new Date(a.data.date || 0).getTime())
        .slice(0, 6);
    } else {
      collectionData = collectionEntries;
    }
    
    console.log(`Loaded ${collectionData.length} items from collection "${collectionName}"`);
  } catch (error) {
    console.warn(`Could not load collection ${collectionName}:`, error);
  }
}

// Check if we should use variant system
const shouldUseVariant = variant && [
  'hero', 'twoCol', 'cardGrid', 'centered', 'simple',
  'masonry', 'tabs', 'accordion', 'customGrid'
].includes(variant);

// Determine the element to render
const Element = tagName;
---

<Element
  id={id}
  class={`${sectionClass} relative w-full`}
  {...props}
>
  {/* Variant System with Collection Data */}
  {shouldUseVariant ? (
    <VariantWrapper 
      variant={variant} 
      variantProps={variantProps}
      collectionData={collectionData}
      meta={meta}
    >
      {/* Hero Slots */}
      <slot name="heading" />
      <slot name="description" />
      <slot name="buttons" />
      
      {/* Two Column Slots */}
      <slot name="left" />
      <slot name="right" />
      
      {/* Card Grid Slots */}
      <slot name="cards" />
      
      {/* Centered Slots */}
      <slot name="additional" />
      <slot name="footer" />
      
      {/* Simple Slots */}
      <slot name="header" />
      
      {/* Masonry Slots */}
      <slot name="items" />
      
      {/* Tabs Slots */}
      <slot name="tabs" />
      
      {/* Accordion Slots */}
      <slot name="items" />
      
      {/* Custom Grid Slots */}
      <slot name="items" />
      
      {/* Default Slot */}
      <slot />
    </VariantWrapper>
  ) : (
    /* Default Section Layout with Collection Data */
    <div class="content-section max-w-full z-10">
      {collectionData.length > 0 ? (
        <div class="collection-content">
          {collectionData.map((item, index) => (
            <div class="collection-item">
              {item.data.title && <h3>{item.data.title}</h3>}
              {item.data.description && <p>{item.data.description}</p>}
              {item.data.featuredImage && (
                <img src={item.data.featuredImage} alt={item.data.title || 'Featured image'} />
              )}
            </div>
          ))}
        </div>
      ) : (
        <slot />
      )}
    </div>
  )}
</Element>
