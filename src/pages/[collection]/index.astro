---
// src/pages/[collection]/index.astro

import Section from "@/components/Section/Section.astro";
import { collections } from "@/content/config";
import { getCollectionMeta } from "@/utils/FetchMeta";
import { capitalize } from "@/utils/ContentUtils";

// 1) Static paths
export async function getStaticPaths() {
  try {
    // Ensure collections is defined and has keys
    if (!collections || typeof collections !== 'object') {
      console.warn('Collections is not properly loaded, using fallback paths');
      return [];
    }

    const names = Object.keys(collections);
    if (!names || names.length === 0) {
      console.warn('No collections found, using fallback paths');
      return [];
    }

    const paths = [];

    for (const coll of names) {
      let meta;
      try {
        meta = getCollectionMeta(coll);
      } catch {
        meta = {};
      }

      // only generate the /[collection]/ index if hasPage is not explicitly false
      if (meta.hasPage !== false) {
        paths.push({ params: { collection: coll } });
      }
    }

    return paths;
  } catch (error) {
    console.error('Error in getStaticPaths:', error);
    return [];
  }
}

// 2) Load this collection's meta
const { collection } = Astro.params;
let meta: any = {};

try {
  if (collection && collections && (collections as any)[collection]) {
    meta = getCollectionMeta(collection);
  } else {
    console.warn(`Collection '${collection}' not found in collections config`);
  }
} catch (error) {
  console.warn(`Failed to load meta for collection '${collection}':`, error);
  meta = {};
}

// 3) Try to import the MDX body
let Body = null;
try {
  const mod = await import(`../../content/${collection}/_meta.mdx`);
  Body = mod.default;
} catch {
  /* no _meta.mdx or failed import */
}

// 4) Load the layout
const spec = meta.layout || "../../layouts/ExtendedLayout.astro";
const layoutMap = import.meta.glob("../../layouts/**/*.astro");
const importer = layoutMap[spec];
if (!importer) throw new Error(`Unknown layout: ${spec}`);
const { default: Layout } = await importer() as { default: any };

// 5) Build fallback sections
const sections = meta.sections?.length
  ? meta.sections
  : [
      {
        collection,
        query: "getAll",
        heading: { text: capitalize(collection), tagName: "h2" },
        description: meta.description,
      },
    ];
---

<Layout
  collection={collection}
  title={capitalize(collection)}
  description={meta.description}
  keywords={meta.keywords}
  robots={meta.robots}
  ogType={meta.ogType}
>
  {Body ? (
    <Body />
  ) : (
    <>
      {sections.map((section: any, i: number) => (
        <Section
          key={i}
          variant={section.variant}
          variantProps={(section as any).variantProps || {}}
          collection={section.collection}
          query={section.query}
          heading={section.heading}
          description={section.description}
          descriptionClass={section.descriptionClass}
          sectionClass={section.sectionClass}
          contentClass={section.contentClass}
          itemsClass={section.itemsClass}
          itemClass={section.itemClass}
          buttonsSectionClass={section.buttonsSectionClass}
          headingAreaClass={section.headingAreaClass}
          backgroundMedia={(section as any).backgroundMedia}
          client={(section as any).client}
          slider={(section as any).slider}
          sortBy={(section as any).sortBy}
          sortOrder={(section as any).sortOrder}
          manualOrder={(section as any).manualOrder}
          {...section}
        />
      ))}
    </>
  )}
</Layout>
