---
// src/pages/[collection]/[slug].astro
import { getCollection } from "astro:content";
import Layout from "@/layouts/Layout.astro";
import { Image } from "astro:assets";
import Heading from "src (old) r/components/Heading.jsx";
import Section from "@/components/Section.astro";
import Card from "src (old) r/components/LoopComponents/Card";
import { collections } from "src (old) r/content/config";
import { getCollectionMeta } from "src (old) r/utils/FetchMeta";

// Build all paths for items that end up with `hasPage: true`.
export async function getStaticPaths() {
  const collectionNames = Object.keys(collections);
  let allPaths = [];
  for (const collName of collectionNames) {
    let meta = {};
    try {
      meta = await getCollectionMeta(collName);
    } catch {}
    const { itemsHasPage = true } = meta;
    const entries = await getCollection(collName);
    for (const entry of entries) {
      if (typeof entry.data.hasPage === "undefined") {
        entry.data.hasPage = itemsHasPage;
      }
    }
    const pathsForColl = entries
      .filter((entry) => entry.data.hasPage === true)
      .map((entry) => ({
        params: { collection: collName, slug: entry.slug },
        props: { collection: collName, entry },
      }));
    allPaths.push(...pathsForColl);
  }
  return allPaths;
}

const { collection, entry } = Astro.props;
const { data, body } = entry;
let meta = {};
try {
  meta = await getCollectionMeta(collection);
} catch {}
// Use sections defined on the item if available; otherwise, fall back to meta.itemsSections.
const sections =
  data.sections && data.sections.length > 0
    ? data.sections
    : meta.itemsSections || [];
---

<Layout title={data.title} description={data.description}>
  <article class="p-[var(--spacing-md)]">
    <Heading tagName="h1" class="mb-[var(--spacing-md)]">
      {data.title}
    </Heading>
    {
      data.description && (
        <p class="mb-[var(--spacing-md)]">{data.description}</p>
      )
    }
    {
      data.featuredImage && (
        <Image
          src={data.featuredImage}
          alt={data.title}
          width={600}
          height={400}
          format="avif"
          class="mb-[var(--spacing-md)]"
        />
      )
    }
    {body && <p class="mb-[var(--spacing-md)]">{body}</p>}
    {
      sections.map((section, i) => (
        <Section
          key={i}
          collection={section.collection}
          query={section.query}
          heading={section.heading}
          description={section.description ?? meta.description}
          component={Card}
          button={section.button}
          sectionClass={section.sectionClass}
          itemsClass={section.itemsClass}
          itemClass={section.itemClass}
          contentClass={section.contentClass}
          buttonsSectionClass={section.buttonsSectionClass}
        />
      ))
    }
  </article>
</Layout>
